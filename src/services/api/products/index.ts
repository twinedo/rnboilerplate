import {APP_ID} from '@env';
import {useInfiniteQuery, useMutation, useQuery} from '@tanstack/react-query';
import {_useAxios} from 'services/useAxios';

// Generated by https://quicktype.io

export interface IBanner {
  id: string;
  title: string;
  body: string;
  image: string;
  action: string;
  order: number;
}

export interface IBodyBanner {
  title: string;
  body: string;
  image: any;
  action: string;
  order: number;
}

interface IParams {
  page?: number;
  page_size?: number;
  search?: string;
  limit?: number;
}

export function useGetProducts({
  page = 0,
  page_size,
  search,
  limit = 20,
}: IParams) {
  const {...rest} = useQuery({
    queryKey: [
      'useGetProducts',
      JSON.stringify({page, page_size, search, limit}),
    ],
    queryFn: async () => {
      try {
        const response = await _useAxios({
          url: '/post',
          method: 'get',
          headers: {
            'app-id': APP_ID,
          },
          params: {
            page: page,
            limit: limit,
          },
        });
        console.log('response', response);
        return {
          isSuccess: true,
          isError: false,
          message: 'Success',
          error: null,
          data: response.data,
        };
      } catch (error) {
        console.log('error get products', error);
        return {
          isSuccess: false,
          isError: true,
          message: 'Error get products',
          error: error,
          data: null,
        };
      }
    },
    refetchOnMount: true,
    refetchOnReconnect: true,
  });

  return {...rest};
}

export function useGetProductById(props?: IParams & {id: string}) {
  const {...rest} = useQuery({
    queryKey: ['useGetProductById', JSON.stringify(props)],
    queryFn: async () => {
      try {
        const response = await _useAxios({
          url: '/post/' + props.id,
          method: 'get',
        });
        console.log('response', response);
      } catch (error) {
        console.log('error get products', error);
        return error;
      }
    },
    refetchOnMount: true,
    refetchOnReconnect: true,
  });

  return {...rest};
}

export function useAddBanner() {
  const {mutate, ...rest} = useMutation({
    mutationKey: ['addBanner'],
    mutationFn: async (data: IBodyBanner) => {
      var formData = new FormData();
      formData.append('title', data.title);
      formData.append('body', data.body);
      formData.append('image', data.image);
      formData.append('action', data.action);
      formData.append('order', data.order.toString());

      try {
        const response = await _useAxios({
          url: '/banner/create',
          method: 'post',
          headers: {
            'Content-Type': 'multipart/form-data',
            Accept: 'application/json',
          },
          data,
        });
        console.log('resp add banner', response?.data);
        return response?.data?.data;
      } catch (error) {
        console.log('error add banner', error);
        return error;
      }
    },
    onSuccess: data => {
      return data;
    },
    onError: err => {
      return err;
    },
  });

  return {addBanner: mutate, ...rest};
}

export function useUpdateBanner() {
  const {mutate, ...rest} = useMutation({
    mutationKey: ['updateBanner'],
    mutationFn: async (data: {id: string; title: string}) => {
      try {
        const response = await _useAxios({
          url: `/banner/update/${data.id}`,
          method: 'put',
          headers: {
            'Content-Type': 'application/json',
            Accept: 'application/json',
          },
          data: {
            title: data.title,
          },
        });
        console.log('resp update banner', response?.data);
        return response?.data?.data;
      } catch (error) {
        console.log('error update banner', error);
        return error;
      }
    },
    onSuccess: data => {
      return data;
    },
    onError: err => {
      return err;
    },
  });

  return {updateBanner: mutate, ...rest};
}

export function useDeleteBanner() {
  const {mutate, ...rest} = useMutation({
    mutationKey: ['deleteBanner'],
    mutationFn: async (id: string) => {
      try {
        const response = await _useAxios({
          url: `/banner/delete/${id}`,
          method: 'delete',
          headers: {
            'Content-Type': 'application/json',
            Accept: 'application/json',
          },
        });
        console.log('resp delete banner', response?.data);
        return response?.data?.data;
      } catch (error) {
        console.log('error delete banner', error);
        return error;
      }
    },
    onSuccess: data => {
      return data;
    },
    onError: err => {
      return err;
    },
  });

  return {deleteBanner: mutate, ...rest};
}
